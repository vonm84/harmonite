<!DOCTYPE html>
<html>
<head>
<title>Workspace</title>
<%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
<%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
<%= javascript_include_tag "createjs-2015.11.26.min.js" %>
<%= javascript_include_tag "Slider.js" %>
<%= javascript_include_tag "Wedge.js" %>
<%= csrf_meta_tags %>
  
   
 <script>
    var stage, cont, wedgeCont, arrow, cursorWedge, spacebarState, cursorWedgeStart;
    
    var debugtext, musictext;
    
    var lastChunk = false;
    
    var KEYCODE_SPACEBAR = 32;
    
    var gongSound;

    var wedges = [];
    
    var wedgeCounter;
    
    var currentPreset = 1
    
    function init() {
    
    MakeSound:{    
    if (!createjs.Sound.initializeDefaultPlugins()) {return;} //sound
 
     var audioPath = 'assets/';
     var sounds = [
        {id:"Gong", src:"23582__loofa__gong3-a38b9f27927c2861a62ab5ad2bbdfac17257ee5fad97c467d84122dffabf38e8.mp3"},
     ];
    //createjs.Sound.addEventListener("fileload", handleLoad); //play on file load I guess?
    createjs.Sound.registerSounds(sounds, audioPath); 
    }
        
    spacebarState = false;
    
    stage = new createjs.Stage("canvas"); // points to the canvas element in html body
    cont = stage.addChild(new createjs.Container());// container to hold the circle
    cont.x = cont.y = 250;
    cont.rotation -= 90;
    
    wedgeCont = cont.addChild(new createjs.Container());
    
    wedgeCounter = 0;    
    
    wedges[0] = new Wedge(0,80);
    wedges[1] = new Wedge(80,130);
    wedges[2] = new Wedge(130,250, 0.5);
    wedges[3] = new Wedge(250,300);
    wedges[4] = new Wedge(300,360);


    for (i=1;i<wedges.length;i++) {
        wedges[i].alpha = 0;}
    for (i=0;i<wedges.length;i++) wedges[i].drawWedge(wedgeCont);
    

    
    ClockFace:{
    var circle = new createjs.Shape(); // create the circle background
    circle.graphics.beginFill("DeepSkyBlue").drawCircle(0, 0, 150);
    circle.x = 0;
    circle.y = 0;
    cont.addChild(circle);
    cont.setChildIndex(circle,0);
    
    cursorWedge = new createjs.Shape(); // create the cursor wedge object
    
    debugtext = new createjs.Text("Hello World", "20px Arial", "Black"); //for debugging
    
    debugtext.x = 250;
    debugtext.y = 450;
    debugtext.textBaseline = "alphabetic";
    debugtext.textAlign = 'center';
    stage.addChild(debugtext);
    stage.setChildIndex(debugtext,4);
    
    for(deg = 0; deg <= 360; deg+= 90) { // create 90 degree markers
      var s1 = new createjs.Shape();
      s1.graphics.beginFill("black").drawCircle(150,0,5);
      s1.rotation = deg;
      cont.addChild(s1);
      cont.setChildIndex(s1,cont.getNumChildren() - 1);
    }
    
    // the arrow
    arrow = new createjs.Shape();
    arrow.graphics
      .beginFill("black").drawRect(0,0, 150,2);
    cont.addChild(arrow);
    }
    
    Button:{
        	var background = new createjs.Shape();
			background.name = "buttonbackground";
			background.graphics.beginFill("green").drawRoundRect(350, -15, 100, 40, 10);
			
			var label = new createjs.Text("Change preset", "12px Arial", "#FFFFFF");
			label.name = "label";
			label.textAlign = "center";
			label.textBaseline = "middle";
			label.x = 350 + 100/2;
			label.y = -15 + 40/2;
			
			var button = new createjs.Container();
			button.name = "button";
			button.x = 20;
			button.y = 20;
 			button.addChild(background, label);
// 			// setting mouseChildren to false will cause events to be dispatched directly from the button instead of its children.
			button.mouseChildren = false;
			
 			stage.addChild(button);
 			button.on("click", handleClick, null, false, null, false);
// 			var targets = [stage,button,label,background];
// 			for (var i=0; i<targets.length; i++) {
// 				var target = targets[i];
				//target.on("click", handleClick, null, false, null, false);
				//target.on("click", handleClick, null, false, null, true);
				//target.addEventListener("click", handleClick, false);
				//target.addEventListener("click", handleClick, true);
// 			}
        
        
    }
    
    
    // tick listener
    createjs.Ticker.setFPS(60);
    createjs.Ticker.addEventListener("tick", tick);
    
    // link to the key press
    this.document.onkeydown = keyDown;
    this.document.onkeyup = keyUp;
    
    TempoSlider:{
    //tempo slider
    var slider = new Slider(30, 120, 200, 50).set({x: 0, y: 0, value: 60});
	slider.on("change", handleSliderChange, this);
	stage.addChild(cont, slider);
	updateEffect(slider.value);
    }
    
    }
    
    function handleClick(evt) {

	wedgeCont.removeAllChildren();
	wedgeCounter = 0;
	lastChunk = false;
	wedges=[];
	
	currentPreset ++;
	
	if (currentPreset == 6) currentPreset = 1;
	
	debugtext.text = "Current preset: " + currentPreset;
	

	switch(currentPreset) {
    case 1:
        wedges[0] = new Wedge(0,80);
        wedges[1] = new Wedge(80,130);
        wedges[2] = new Wedge(130,250, 0.5);
        wedges[3] = new Wedge(250,300);
        wedges[4] = new Wedge(300,360);
        break;
    case 2:
        wedges[0] = new Wedge(0,90,1);
        wedges[1] = new Wedge(90,180,1);
        wedges[2] = new Wedge(180,270,1);
        wedges[3] = new Wedge(270,360,1);
        break;
    case 3:
        wedges[0] = new Wedge(0,67);
        wedges[1] = new Wedge(67,135);
        wedges[2] = new Wedge(135,180);
        wedges[3] = new Wedge(180,248);
        wedges[4] = new Wedge(248,315);
        wedges[5] = new Wedge(315,360);        
        break;
    case 4:
        wedges[0] = new Wedge(0,90,1);
        wedges[1] = new Wedge(90,135);
        wedges[2] = new Wedge(135,180);
        wedges[3] = new Wedge(180,202,2,3);
        wedges[4] = new Wedge(202,225,2,3);
        wedges[5] = new Wedge(225,248,2,3);
        wedges[6] = new Wedge(246,270,2,3);
        wedges[7] = new Wedge(270,360,1);          
        break;
    case 5:
        wedges[0] = new Wedge(0,30);
        wedges[1] = new Wedge(30,60);
        wedges[2] = new Wedge(60,90);
        wedges[3] = new Wedge(90,120);
        wedges[4] = new Wedge(120,150);
        wedges[5] = new Wedge(150,180);
        wedges[6] = new Wedge(180,195,2,3);
        wedges[7] = new Wedge(195,210,2,3);
        wedges[8] = new Wedge(210,270);
        wedges[9] = new Wedge(270,315); 
        wedges[10] = new Wedge(315,360);         
        break;    
}
	
    for (i=1;i<wedges.length;i++) {
        wedges[i].alpha = 0;}
    for (i=0;i<wedges.length;i++) wedges[i].drawWedge(wedgeCont);
				
				
			
	}
    
    function handleSliderChange(evt) {
		updateEffect(evt.target.value);
	}
	
	function updateEffect(value) {
        createjs.Ticker.setFPS(value);
	}
    
//     function handleLoad(event) {
//     createjs.Sound.play(event.src);
// }
    
    function keyDown(event) {

        switch (event.keyCode) { //in case we want other keys
            case KEYCODE_SPACEBAR:
                if (!event.repeat) {
                     cursorWedge.graphics.f(createjs.Graphics.getRGB(0, 0, 0, 0.25));
                     spacebarState = true;
                     cursorWedgeStart = arrow.rotation;
                    cont.addChild(cursorWedge);
                    cont.setChildIndex(cursorWedge, cont.getNumChildren() - 1);
                    gongSound = createjs.Sound.play("Gong");
                    if (wedges[wedgeCounter].checkTapProximity(cursorWedgeStart)) {
                        var howManyWedgesCompleted = 0;
                        for (i=0;i<wedgeCounter;i++){
                            howManyWedgesCompleted += wedges[i].completed;
                        }
                        if (wedgeCounter == howManyWedgesCompleted){
                             debugtext.text = "Yeah! Keep going!";
                             wedges[wedgeCounter].color = "Gold";
                             wedges[wedgeCounter].alpha = 1;
                             wedges[wedgeCounter].attempted = true;
                             for (i=0;i<wedgeCounter; i++) wedges[i].attempted=false;
                             wedgeCounter++;
                             if (wedgeCounter>wedges.length - 1) lastChunk=true;
                        }
                    
                        
                    } else {
                        youFuckedUp();
                        
                    }

                    
                }

                    break;
                }

}

	function keyUp(event) {
		switch(event.keyCode) {
			case KEYCODE_SPACEBAR:
			    spacebarState = false;
                debugtext.color = "Black";			    
                gongSound.stop();
			    cursorWedge.graphics.clear();
			    cont.removeChild(cursorWedge);
                
                if (wedges[wedgeCounter-1].checkReleaseProximity(arrow.rotation % 360)){
                    wedges[wedgeCounter-1].color =  "ForestGreen";
                    if (wedgeCounter < wedges.length){
  	                debugtext.text = "Wedge " + wedgeCounter + " out of " + wedges.length + " complete. Do better.";
                        
                    }else {
                    debugtext.text = "Level complete. So what?";   
                    }
  	                
  	                wedges[wedgeCounter-1].attempted = false;
  	                wedges[wedgeCounter-1].completed = true;
                    
                } else{
                    
                    youFuckedUp();
                }
                
   
		}

	}
	
	function youFuckedUp(){ //reset
	    if (wedgeCounter == 0) {
		 debugtext.text = "Start at the top!";}
	    else {
		 debugtext.text = "You fucked up wedge "+ wedgeCounter + "!";		 
		 wedgeCounter = 0;}
		 lastChunk=false;
	    for (i=0;i<wedges.length;i++){
	        wedges[i].color="LightSeaGreen";
	        wedges[i].attempted=false;
	        wedges[i].completed=false;
	        if (i>0) wedges[i].alpha=0;
	    }

	}
	
    function tick() {
        
        arrow.rotation += 1;
        if (arrow.rotation % 360 == 0){
            var howManyWedgesCompleted = 0;
            for (i=0;i<wedges.length;i++){
                howManyWedgesCompleted += wedges[i].completed;
            }
            
         if( howManyWedgesCompleted != 0 && howManyWedgesCompleted != wedges.length ) {
		 debugtext.text = "Try again.";
		 wedgeCounter = 0;
		 lastChunk=false;
	    for (i=0;i<wedges.length;i++){
	        wedges[i].color="LightSeaGreen";
	        wedges[i].attempted=false;
	        wedges[i].completed=false;
	        if (i>0) wedges[i].alpha=0;
	    }             
             
         }
            
        }
        if (!lastChunk) {
            
        wedges[wedgeCounter].alpha = wedges[wedgeCounter].shadowWedgeAlpha(arrow.rotation % 360);
              stage.update();    
        }
        
      
      if (spacebarState === true) {
            cursorWedge.graphics.moveTo(0,0);
            cursorWedge.graphics.arc(0,0,150,cursorWedgeStart * Math.PI/180, arrow.rotation * Math.PI/180);
      }

      stage.update();
    }

  </script>
  
</head>
<body onload="init();">
 
  <%= yield %>

   <canvas id="canvas" width="500" height="500">   </canvas>
</body>
</html>
