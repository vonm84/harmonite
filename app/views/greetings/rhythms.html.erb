<!DOCTYPE html>
<html>
<head>
<title>Harmonite</title>
<%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
<%= stylesheet_link_tag "rhythmfont" %>
<%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
<%= javascript_include_tag "createjs-2015.11.26.min.js" %>
<%= javascript_include_tag "Slider.js" %>
<%= javascript_include_tag "Wedge.js" %>
<%= javascript_include_tag "Fraction.js" %>
<%= csrf_meta_tags %>
  
   
 <script>
    var stage, cont, wedgeCont, fractionCont, notesCont, arrow, cursorWedge, spacebarState, cursorWedgeStart, arcCommand;
    
    var debugtext, musictext;
    
    
    var KEYCODE_SPACEBAR = 32;
    
    var gongSound;

    var wedges = [];
    var wedgeStartAngles = [];
    
    var fractions = [];
    var notes = [];
    
    var wedgeCounter;
    
    var currentPreset = 1;
    var fired = false;
    
    var congas = ["Conga1","Conga2","Conga3"];
    
    var margin, fractIncrement, musicIncrement, one;
    
    function init() {
        

    
    MakeSound:{    
    if (!createjs.Sound.initializeDefaultPlugins()) {return;} //sound
 
     var audioPath = 'assets/';
     var sounds = [
        {id:"Gong", src:"23582__loofa__gong3-a38b9f27927c2861a62ab5ad2bbdfac17257ee5fad97c467d84122dffabf38e8.mp3"},
        {id:"Metronome", src:"metronome-101c16bd3de41b5047c2c0f4b919e14a690fb3f8c28acb966d229676936672c8.mp3"},
        {id:"Conga1", src:"conga1-1023ae53229fcb5fa18efeb54811aec59dfef2a35e4bcb569c9fa573663faa4b.mp3"},
        {id:"Conga2", src:"conga2-7e3c4a7f1d9135331908d9c7149015a65fbeba5c49fad2896dc6211daef2eb13.mp3"},
        {id:"Conga3", src:"conga3-51f2f790b4504376b04af21111878adb34bd0e7897bc44d93fd75bef96f1c71d.mp3"}
     ];

    createjs.Sound.registerSounds(sounds, audioPath); 
    }
        
    spacebarState = false; // for cursor shadow wedge
    
    stage = new createjs.Stage("canvas"); // points to the canvas element in html body
    createjs.Touch.enable(stage);
    margin=0.2* stage.canvas.width;    
    cont = stage.addChild(new createjs.Container());// container to hold the circle
    cont.x = stage.canvas.width/2;
    cont.y = 250;
    cont.rotation -= 90;
    wedgeCont = cont.addChild(new createjs.Container());
    fractionCont = stage.addChild(new createjs.Container());  
    notesCont = stage.addChild(new createjs.Container());
    
    InitialiseWedges: {
    
    wedgeCounter = 0;    
    
    wedges[0] = new Wedge(0,360,0.25,null,null,null,"w");
    // wedges[1] = new Wedge(80,130);
    // wedges[2] = new Wedge(130,250, 0.5);
    // wedges[3] = new Wedge(250,300);
    // wedges[4] = new Wedge(300,360);
    //wedges[5] = new Wedge(310,360);
    //wedges[6] = new Wedge(320,330);
    //wedges[7] = new Wedge(300,360);

    for (i=1;i<wedges.length;i++) {
        wedges[i].alpha = 0;}
    for (i=0;i<wedges.length;i++)  {wedges[i].drawWedge(wedgeCont);
        wedgeStartAngles[i]=wedges[i].startAngle;}
    }
    
    drawFractions();

    drawNotes();

    ClockFace:{
    var circle = new createjs.Shape(); // create the circle background
    circle.graphics.beginFill("DeepSkyBlue").drawCircle(0, 0, 150);
    circle.x = 0;
    circle.y = 0;
    cont.addChild(circle);
    cont.setChildIndex(circle,0);
    
    cursorWedge = new createjs.Shape(); // create the cursor wedge object
    arcCommand = cursorWedge.graphics.arc(0, 0, 150, cursorWedgeStart * Math.PI / 180, 0).command;
    
    debugtext = new createjs.Text("Hello World", "20px Arial", "Black"); //for debugging
    debugtext.x = 250;
    debugtext.y = 450;
    debugtext.textBaseline = "alphabetic";
    debugtext.textAlign = 'center';
    stage.addChild(debugtext);
    stage.setChildIndex(debugtext,4);
    
    
    for(deg = 0; deg <= 360; deg+= 90) { // create 90 degree markers
      var s1 = new createjs.Shape();
      s1.graphics.beginFill("black").drawCircle(150,0,5);
      s1.rotation = deg;
      cont.addChild(s1);
      cont.setChildIndex(s1,cont.getNumChildren() - 1);
    }
    
    // the arrow
    arrow = new createjs.Shape();
    arrow.graphics.beginFill("black").drawRect(0,0, 150,2);
    cont.addChild(arrow);
    }
    
    Button:{
        	var background = new createjs.Shape();
			background.name = "buttonbackground";
			background.graphics.beginFill("green").drawRoundRect(350, -15, 100, 40, 10);
			
			var label = new createjs.Text("Change preset", "12px Arial", "#FFFFFF");
			label.name = "label";
			label.textAlign = "center";
			label.textBaseline = "middle";
			label.x = 350 + 100/2;
			label.y = -15 + 40/2;
			
			var button = new createjs.Container();
			button.name = "button";
			button.x = 20;
			button.y = 20;
 			button.addChild(background, label);
			button.mouseChildren = false;
			
 			stage.addChild(button);
 			button.on("click", handleClick, null, false, null, false);

        
        
    }
    
    TempoSlider:{
    //tempo slider
    var slider = new Slider(30, 120, 200, 50).set({x: 0, y: 0, value: 60});
	slider.on("change", handleSliderChange, this);
	stage.addChild(cont, slider);
	updateEffect(slider.value);
    }
    
    // tick listener
    createjs.Ticker.setFPS(60);
    createjs.Ticker.timingMode = createjs.Ticker.RAF_SYNCHED;
    createjs.Ticker.addEventListener("tick", tick);
    
    // link to the key press
    this.document.onkeydown = keyDown;
    this.document.onkeyup = keyUp;
    
    
    }
    
    
    function drawFractions(){
        fractIncrement = Math.round((stage.canvas.width - 2*margin)/(wedges.length));
  
        for (i=0;i<wedges.length;i++) {
                fractions[i] = wedges[i].drawFraction(margin + i*fractIncrement,480); 
                fractionCont.addChild(fractions[i]);
                if(i<(wedges.length-1)){
                var inbetween = new createjs.Text("+", "Bold 16px Arial", "Black");}
                else {
                var inbetween = new createjs.Text("=", "Bold 16px Arial", "Black");  
                }
                fractionCont.addChild(inbetween);
                inbetween.x = margin + i*fractIncrement + Math.round(fractIncrement/2);
                inbetween.y = 480;
        }
        one = new createjs.Text("1", "Bold 16px Arial", "Black")
        fractionCont.addChild(one);
            one.x = stage.canvas.width - margin;
        one.y = 480;
    }
    
    function drawNotes(){
        musicIncrement = Math.round((stage.canvas.width - 2*margin)/(wedges.length+1))
            notesCont.addChild(wedges[0].drawNote(margin,520,"$4"));
            
            
                for (i=0;i<wedges.length;i++) {
                    notes[i] = wedges[i].drawNote(margin + (i+1)*musicIncrement,520); 
                    notesCont.addChild(notes[i]);

                }
                
                notesCont.addChild(wedges[0].drawNote(stage.canvas.width - margin,520,"\\|"));
            
            
    }
    
    function handleClick(evt) {

    	wedgeCont.removeAllChildren();
    	fractionCont.removeAllChildren();
        notesCont.removeAllChildren();
    	
    	wedgeCounter = 0;
    	wedges=[];
    	wedgeStartAngles=[];
    	
    	currentPreset ++;
    	
    	if (currentPreset == 10) currentPreset = 1;
    	
    	debugtext.text = "Current preset: " + currentPreset;
    	
    
    	switch(currentPreset) {
        case 1:
            wedges[0] = new Wedge(0,360,0.25,null,null,null,"w");
            break;
        case 2:
            wedges[0] = new Wedge(0,360,0.25,null,2,2,"h-h",[180]);
            break;
        case 3:
            wedges[0] = new Wedge(0,360,0.25,null,4,4,"q-q-q-q",[90,180,270]);
            break;              
            
        case 4:
            wedges[0] = new Wedge(0,180,0.5,null,2,4,"q-q",[90]);
            wedges[1] = new Wedge(180,360,0.5,null,2,4,"q-q",[270]);
            break;
        case 5:
            wedges[0] = new Wedge(0,180,0.5,null,null,null,"h");
            wedges[1] = new Wedge(180,360,0.5,null,2,4,"q-q",[270]);
            
            break;
        case 6:
            wedges[0] = new Wedge(0,180,0.5,null,2,4,"q-q",[90]);
            wedges[1] = new Wedge(180,360,0.5,null,null,null,"h");          
            break;
        case 7:
            wedges[0] = new Wedge(0,90,1);
            wedges[1] = new Wedge(90,180,1);
            wedges[2] = new Wedge(180,270,1);
            wedges[3] = new Wedge(270,360,1);            
            break;
        case 8:
            wedges[0] = new Wedge(0,180,0.5,null,null,null,"h"); 
            wedges[1] = new Wedge(180,270,1);
            wedges[2] = new Wedge(270,360,1);                
            break;
        case 9:
            wedges[0] = new Wedge(0,180,0.5,null,null,null,"h");
            wedges[1] = new Wedge(180,360,0.5,null,4,8,"r_t_t_y",[225,270,315]);            
            break;            
}
	drawFractions();
	drawNotes();
	
    for (i=1;i<wedges.length;i++) {
        wedges[i].alpha = 0;}
    for (i=0;i<wedges.length;i++) {wedges[i].drawWedge(wedgeCont);
        wedgeStartAngles[i]=wedges[i].startAngle;}
				
				
			
	}
    
    function handleSliderChange(evt) {
		updateEffect(evt.target.value);
	}
	
	function updateEffect(value) {
        createjs.Ticker.setFPS(value);
	}
    
    function keyDown(event) {

        switch (event.keyCode) { //in case we want other keys
            case KEYCODE_SPACEBAR:
                if (!fired) {
                    //fractionColor(newFract,"red");
                    fired = true;
                     cursorWedge.graphics.f(createjs.Graphics.getRGB(0, 0, 0, 0.25));
                     spacebarState = true;
                     cursorWedgeStart = arrow.rotation;
                     
                     
                    cont.addChild(cursorWedge);
                    cont.setChildIndex(cursorWedge, cont.getNumChildren() - 1);
                    gongSound = createjs.Sound.play("Gong");
                    if (wedges[wedgeCounter].checkTapProximity(cursorWedgeStart)) {
                        var howManyWedgesCompleted = 0;
                        for (i=0;i<wedgeCounter;i++){
                            howManyWedgesCompleted += wedges[i].completed;
                        }
                        if (wedgeCounter == howManyWedgesCompleted){
                             debugtext.text = "Yeah! Keep going!";
                             wedges[wedgeCounter].color = "Gold";
                             wedges[wedgeCounter].alpha = 1;
                             wedges[wedgeCounter].attempted = true;
                             for (i=0;i<wedgeCounter; i++) wedges[i].attempted=false;
                             wedgeCounter++;
                             notes[wedgeCounter-1].color="Gold";
                            fractionColor(fractions[wedgeCounter-1], "Gold");
                        }
                    
                        
                    } else {
                        youFuckedUp();
                        
                    }

                    
                }

                    break;
                }

}

	function keyUp(event) {
		switch(event.keyCode) {
			case KEYCODE_SPACEBAR:
			    fired = false;
			    spacebarState = false;
		    
                gongSound.stop();
			    cursorWedge.graphics.clear();
			    cont.removeChild(cursorWedge);
                
                if (wedges[wedgeCounter-1].checkReleaseProximity(arrow.rotation % 360)){
                    wedges[wedgeCounter-1].color =  "ForestGreen";
                   
                    if (wedgeCounter < wedges.length){
  	                debugtext.text = "Wedge " + wedgeCounter + " out of " + wedges.length + " complete. Have another go.";
                        
                    }else {
                    debugtext.text = "Level complete";
                    one.color="ForestGreen";
                    }
  	                
  	                wedges[wedgeCounter-1].attempted = false;
  	                wedges[wedgeCounter-1].completed = true;
  	                notes[wedgeCounter-1].color = "ForestGreen"
                    fractionColor(fractions[wedgeCounter-1], "ForestGreen");                     
                } else{
                    
                    youFuckedUp();
                }
                
   
		}

	}
	
	function youFuckedUp(){ //reset
	    if (wedgeCounter == 0) {
		 debugtext.text = "Start at the top";}
	    else {
		 debugtext.text = "You made a mistake at wedge "+ wedgeCounter;		 
		 wedgeCounter = 0;}
	    for (i=0;i<wedges.length;i++){
	        wedges[i].color="LightSeaGreen";
	        wedges[i].attempted=false;
	        wedges[i].completed=false;
	        if (i>0) wedges[i].alpha=0;
	    }
	    notesCont.removeAllChildren();
	    fractionCont.removeAllChildren();
	    drawNotes();
	    drawFractions();
	   // for (i=0;i<fractions.length;i++){
	   // 	//fractionColor(fractions[i],"Black");
	   // }

	}
	
	function fractionColor(fract,col){
	    for (i=0;i<fract.children.length;i++) fract.children[i].color = col;
	}
	
    function tick() {
                    
        arrow.rotation += 1;
        if (arrow.rotation % 360 == 0 && spacebarState == false){
            var howManyWedgesCompleted = 0;
            for (i=0;i<wedges.length;i++){
                howManyWedgesCompleted += wedges[i].completed;
            }
            
         if( howManyWedgesCompleted != 0 && howManyWedgesCompleted != wedges.length ) {
		 //debugtext.text = "";
		 wedgeCounter = 0;
	    for (i=0;i<wedges.length;i++){
	        wedges[i].color="LightSeaGreen";
	        wedges[i].attempted=false;
	        wedges[i].completed=false;
	        if (i>0) {wedges[i].alpha=0;}
	    }             
             
         }
            
        }
        if (arrow.rotation % 90 == 0) createjs.Sound.play("Metronome").volume = 0.2;
        for(i=0;i<wedgeStartAngles.length;i++){
            if ((arrow.rotation % 360) == wedgeStartAngles[i]){
                createjs.Sound.play("Conga2");//congas[Math.floor(Math.random()*congas.length)]);
            }
            
        }
        
        if (wedgeCounter<(wedges.length)) {
            
        wedges[wedgeCounter].alpha = wedges[wedgeCounter].shadowWedgeAlpha(arrow.rotation % 360);
              stage.update();    
        }
        
      
      if (spacebarState === true) {
            cursorWedge.graphics.clear();
            cursorWedge.graphics.f(createjs.Graphics.getRGB(0, 0, 0, 0.25));
			//cont.removeChild(cursorWedge);
			
            cursorWedge.graphics.moveTo(0,0);
            cursorWedge.graphics.arc(0,0,150,cursorWedgeStart * Math.PI/180, arrow.rotation * Math.PI/180);
            //arcCommand.endAngle = arrow.rotation * Math.PI / 180;
            //debugtext.text = arcCommand.endAngle;
            //cont.addChild(cursorWedge);
      }

      stage.update();
    }

  </script>
  
</head>
<body onload="init();">
 

   <canvas id="canvas" width="500" height="600">   </canvas>
     

</body>
</html>